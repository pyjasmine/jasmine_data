[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/stats/stats_and_public_health_project/jasmine_m_ stats_and_public_health_part_1.html",
    "href": "posts/stats/stats_and_public_health_project/jasmine_m_ stats_and_public_health_part_1.html",
    "title": "Portfolio",
    "section": "",
    "text": "West Nile Virus: Stats and Public Health Part 1\n\n#Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nimport geopandas as gpd\n\n\n#Importing data from CSV to dataframe\ndf = pd.read_csv('mosquito_data.csv')\n\n\n#Checking dataframe dictionary\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 18495 entries, 0 to 18494\nData columns (total 13 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Year             18495 non-null  int64  \n 1   Week             18495 non-null  int64  \n 2   Address Block    18495 non-null  object \n 3   Block            18495 non-null  int64  \n 4   Trap             18495 non-null  object \n 5   Trap type        18495 non-null  object \n 6   Date             18495 non-null  object \n 7   Mosquito number  18495 non-null  int64  \n 8   Mosquito ID      18495 non-null  object \n 9   WNV Present      18495 non-null  object \n 10  Species          18495 non-null  object \n 11  Lat              15571 non-null  float64\n 12  Lon              15571 non-null  float64\ndtypes: float64(2), int64(4), object(7)\nmemory usage: 1.8+ MB\n\n\n\ndf.shape\n\n(18495, 13)\n\n\n\n#Taking a look at the data in the dataframe\ndf.head()\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      Address Block\n      Block\n      Trap\n      Trap type\n      Date\n      Mosquito number\n      Mosquito ID\n      WNV Present\n      Species\n      Lat\n      Lon\n    \n  \n  \n    \n      0\n      2019\n      39\n      100XX W OHARE AIRPORT\n      100\n      T910\n      GRAVID\n      2019-09-26 00:09:00\n      2\n      Res\n      negative\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      1\n      2019\n      39\n      52XX S KOLMAR AVE\n      52\n      T114\n      GRAVID\n      2019-09-26 00:09:00\n      1\n      Res\n      negative\n      CULEX RESTUANS\n      41.798211\n      -87.736925\n    \n    \n      2\n      2019\n      39\n      58XX N WESTERN AVE\n      58\n      T028\n      GRAVID\n      2019-09-26 00:09:00\n      2\n      Res\n      negative\n      CULEX RESTUANS\n      41.987245\n      -87.689417\n    \n    \n      3\n      2019\n      39\n      39XX N SPRINGFIELD AVE\n      39\n      T228\n      GRAVID\n      2019-09-26 00:09:00\n      1\n      Res\n      negative\n      CULEX RESTUANS\n      41.953664\n      -87.724987\n    \n    \n      4\n      2019\n      39\n      131XX S BRANDON AVE\n      131\n      T209\n      GRAVID\n      2019-09-26 00:09:00\n      9\n      Res\n      negative\n      CULEX RESTUANS\n      41.657069\n      -87.546049\n    \n  \n\n\n\n\n\nBasic Data Wrangling\n\n#1-Creating a copy of df to make changes to new df1\n\ndf1 = df.copy()\n\n\ndf1.head(2)\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      Address Block\n      Block\n      Trap\n      Trap type\n      Date\n      Mosquito number\n      Mosquito ID\n      WNV Present\n      Species\n      Lat\n      Lon\n    \n  \n  \n    \n      0\n      2019\n      39\n      100XX W OHARE AIRPORT\n      100\n      T910\n      GRAVID\n      2019-09-26 00:09:00\n      2\n      Res\n      negative\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      1\n      2019\n      39\n      52XX S KOLMAR AVE\n      52\n      T114\n      GRAVID\n      2019-09-26 00:09:00\n      1\n      Res\n      negative\n      CULEX RESTUANS\n      41.798211\n      -87.736925\n    \n  \n\n\n\n\n\n#Changing Date column to datetime format\n\ndf1['Date'] = pd.to_datetime(df['Date'])\n\n\n#Checking dtype has changed.\n\ndf1['Date']\n\n0       2019-09-26 00:09:00\n1       2019-09-26 00:09:00\n2       2019-09-26 00:09:00\n3       2019-09-26 00:09:00\n4       2019-09-26 00:09:00\n                ...        \n18490   2016-09-09 00:09:00\n18491   2007-08-24 00:08:00\n18492   2016-07-27 00:07:00\n18493   2017-08-17 00:08:00\n18494   2015-08-20 00:08:00\nName: Date, Length: 18495, dtype: datetime64[ns]\n\n\nThe date column format has been changed from ‘object’ to ‘datetime64[ns].’\n\n#2- Categorical data:\n\ndf1['Species'].sample(5)\n\n6433     CULEX RESTUANS\n4419     CULEX RESTUANS\n2488     CULEX RESTUANS\n7865     CULEX RESTUANS\n13728     CULEX PIPIENS\nName: Species, dtype: object\n\n\n\ndf1['WNV Present'].sample(5)\n\n11129    negative\n9349     negative\n9974     negative\n16204    positive\n11009    negative\nName: WNV Present, dtype: object\n\n\n\ndf1['Species'].value_counts().plot(kind='barh', figsize=(10, 5))\n\n<AxesSubplot:>\n\n\n\n\n\nThe data shows that there is a higher number of Culex Restuans species of Mosquitos.\n\ndf1['WNV Present'].value_counts().plot(kind='bar', figsize=(10, 5)\n                                      )\n\n<AxesSubplot:>\n\n\n\n\n\nMost mosquitos that were caught in the traps do not carry the West Nile Virus.\n\n# Numerical Data\ndf1['Year']\n\n0        2019\n1        2019\n2        2019\n3        2019\n4        2019\n         ... \n18490    2016\n18491    2007\n18492    2016\n18493    2017\n18494    2015\nName: Year, Length: 18495, dtype: int64\n\n\n\ndf1['Mosquito number']\n\n0         2\n1         1\n2         2\n3         1\n4         9\n         ..\n18490     4\n18491    19\n18492    34\n18493    50\n18494     6\nName: Mosquito number, Length: 18495, dtype: int64\n\n\n\n#Looking at Year column distribution:\ndf1['Year'].value_counts() / df1.shape[0]*100.0\n\n2007    11.576102\n2014    10.813733\n2016     9.970262\n2013     8.780752\n2010     7.553393\n2012     7.526358\n2018     7.358746\n2019     6.536902\n2015     6.369289\n2009     6.136794\n2011     6.055691\n2017     6.001622\n2008     5.320357\nName: Year, dtype: float64\n\n\n\ndf1['Year'].value_counts().plot(kind='bar', figsize=(10, 5))\n\n<AxesSubplot:>\n\n\n\n\n\nMore WNV tests were performed in 2007, with the number of tests performed dropping each year.\n\n#Looking at Mosquito Number column distribution:\ndf1['Mosquito number'].mean()\n\n10.879913490132468\n\n\n\ndf1['Mosquito number'].median()\n\n5.0\n\n\n\ndf1['Mosquito number'].value_counts()\n\n1     4141\n2     2263\n3     1564\n4     1105\n5      918\n6      722\n50     647\n7      610\n8      536\n9      437\n10     366\n11     362\n12     343\n13     293\n14     256\n15     239\n16     225\n17     211\n18     189\n21     182\n19     166\n23     153\n20     152\n27     136\n26     129\n31     128\n29     127\n28     118\n24     116\n25     116\n22     115\n32     103\n47      97\n37      95\n46      92\n33      91\n36      81\n43      81\n34      80\n45      76\n30      75\n39      71\n44      70\n35      67\n41      65\n48      65\n42      63\n38      63\n40      49\n49      46\nName: Mosquito number, dtype: int64\n\n\nThe Mosquito number column is the counted number of mosquitos caught in each trap, applying the values_counted() counts each time the same number of mosquitos was caught.\n\nplt.figure(figsize=(10, 5))\nplt.hist(df1['Mosquito number'], bins=25)\nplt.xlabel('Number of Mosquitos Caught in a Trap')\nplt.ylabel('Occurance')\nplt.title('Mosquito Numbers')\nplt.axvline(df1['Mosquito number'].median(), label='median', color='cornflowerblue')\nplt.axvline(df1['Mosquito number'].mean(), label='mean', color='goldenrod')\nplt.legend()\nplt.show()\n\n\n\n\nThe above plot is a histogram showing the occurance of number of mosquitos caught each time traps were laid out. According to the distribution, traps are more likely to trap between 5 and 10 mosquitos per trap. There are some outlier values at the 50 count.\n\n#Visualising the distribution on a boxplot:\nsns.boxplot(x=df1['Mosquito number'])\n\n<AxesSubplot:xlabel='Mosquito number'>\n\n\n\n\n\nUsing a boxplot to better visualise this columns, it is apparent that there are a lot of outliers, this is most likely caused by how the data is split between the rows, with a cap on the number of mosquitos at 50, this means it is best to keep these outliers as they are important data points.\n\n#3- Looking at number of duplicated rows:\ndf1.duplicated().sum()\n\n658\n\n\n\nround(df1.duplicated().sum()/ df1.shape[0]*100.0)\n\n4.0\n\n\n4% of the rows are duplicates.\n\n#Taking a look at the duplicate rows:\ndf1[df1.duplicated(keep=False)].head(100)\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      Address Block\n      Block\n      Trap\n      Trap type\n      Date\n      Mosquito number\n      Mosquito ID\n      WNV Present\n      Species\n      Lat\n      Lon\n    \n  \n  \n    \n      187\n      2019\n      35\n      100XX W OHARE AIRPORT\n      100\n      T913\n      GRAVID\n      2019-08-29 00:08:00\n      3\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      273\n      2019\n      34\n      100XX W OHARE AIRPORT\n      100\n      T901\n      GRAVID\n      2019-08-22 00:08:00\n      16\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      310\n      2019\n      33\n      100XX W OHARE\n      100\n      T903\n      GRAVID\n      2019-08-15 00:08:00\n      3\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      341\n      2019\n      33\n      100XX W OHARE AIRPORT\n      100\n      T913\n      GRAVID\n      2019-08-15 00:08:00\n      15\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      398\n      2019\n      32\n      100XX W OHARE AIRPORT\n      100\n      T913\n      GRAVID\n      2019-08-08 00:08:00\n      8\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      3845\n      2016\n      29\n      100XX W OHARE AIRPORT\n      100\n      T906\n      GRAVID\n      2016-07-21 00:07:00\n      12\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      3851\n      2016\n      29\n      100XX W OHARE AIRPORT\n      100\n      T913\n      GRAVID\n      2016-07-21 00:07:00\n      42\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      3859\n      2016\n      29\n      100XX W OHARE AIRPORT\n      100\n      T911\n      GRAVID\n      2016-07-21 00:07:00\n      47\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      3868\n      2016\n      28\n      100XX W OHARE AIRPORT\n      100\n      T905\n      GRAVID\n      2016-07-14 00:07:00\n      24\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n    \n      3877\n      2016\n      28\n      100XX W OHARE AIRPORT\n      100\n      T902\n      GRAVID\n      2016-07-14 00:07:00\n      50\n      Res\n      positive\n      CULEX RESTUANS\n      NaN\n      NaN\n    \n  \n\n100 rows × 13 columns\n\n\n\n\n#Removing duplicated rows and assigning to a new variable df2:\n\ndf2 = df1.drop_duplicates()\n\n\n#Checking that duplicates have been dropped:\ndf2.duplicated().sum()\n\n0\n\n\n\n# Checking for duplicated columns:\ndf1.T.duplicated(keep=False)\n\nYear               False\nWeek               False\nAddress Block      False\nBlock              False\nTrap               False\nTrap type          False\nDate               False\nMosquito number    False\nMosquito ID        False\nWNV Present        False\nSpecies            False\nLat                False\nLon                False\ndtype: bool\n\n\n\n# 4- Looking for null values in the data:\ndf2.isna().sum()\n\nYear                  0\nWeek                  0\nAddress Block         0\nBlock                 0\nTrap                  0\nTrap type             0\nDate                  0\nMosquito number       0\nMosquito ID           0\nWNV Present           0\nSpecies               0\nLat                2266\nLon                2266\ndtype: int64\n\n\n\n#Percentage of null values in the columns\ndf2.isna().sum()/df2.shape[0]*100.0\n\nYear                0.00000\nWeek                0.00000\nAddress Block       0.00000\nBlock               0.00000\nTrap                0.00000\nTrap type           0.00000\nDate                0.00000\nMosquito number     0.00000\nMosquito ID         0.00000\nWNV Present         0.00000\nSpecies             0.00000\nLat                12.70393\nLon                12.70393\ndtype: float64\n\n\nMost of the null values are in the latitude and longitude columns, ~13% null values.\n\n#Taking a closer look at Lat:\ndf2['Lat'].mean()\n\n41.83996347772076\n\n\n\ndf2['Lat'].median()\n\n41.845715401999996\n\n\n\ndf2['Lat'].mode()\n\n0    41.956299\ndtype: float64\n\n\n\ndf2['Lat'].describe()\n\ncount    15571.000000\nmean        41.839963\nstd          0.111374\nmin         41.644720\n25%         41.742670\n50%         41.845715\n75%         41.945961\nmax         42.017801\nName: Lat, dtype: float64\n\n\n\nplt.figure(figsize=(10, 5))\nplt.hist(df2['Lat'].values, bins=25)\nplt.axvline(df2['Lat'].mean(), label='mean', color='green')\nplt.axvline(df2['Lat'].median(), label='median', color='yellow')\nplt.xlabel('Latitude')\nplt.ylabel('Frequency')\nplt.title('Latitude histogram')\nplt.show()\n\n/home/amina/anaconda3/lib/python3.7/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n  keep = (tmp_a >= first_edge)\n/home/amina/anaconda3/lib/python3.7/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n  keep &= (tmp_a <= last_edge)\n\n\n\n\n\nThe missing values in column ‘Lat’ will be replaced by using the mean value for Lat column.\n\ndf2['Lat'] = df2['Lat'].fillna(df2['Lat'].mean())\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2.isna().sum()\n\nYear                  0\nWeek                  0\nAddress Block         0\nBlock                 0\nTrap                  0\nTrap type             0\nDate                  0\nMosquito number       0\nMosquito ID           0\nWNV Present           0\nSpecies               0\nLat                   0\nLon                2266\ndtype: int64\n\n\n\n#Taking a look at Lon column:\ndf2['Lon'].mean()\n\n-87.69164248395428\n\n\n\ndf2['Lon'].median()\n\n-87.691697729\n\n\n\ndf2['Lon'].mode()\n\n0   -87.797517\ndtype: float64\n\n\n\ndf2['Lon'].describe()\n\ncount    15571.000000\nmean       -87.691642\nstd          0.076545\nmin        -87.854473\n25%        -87.747459\n50%        -87.691698\n75%        -87.637873\nmax        -87.531051\nName: Lon, dtype: float64\n\n\n\nplt.figure(figsize=(10, 5))\nplt.hist(df2['Lon'].values, bins=25)\nplt.axvline(df2['Lon'].mean(), label='mean', color='green')\nplt.axvline(df2['Lon'].median(), label='median', color='yellow')\nplt.xlabel('Longitude')\nplt.ylabel('Frequency')\nplt.title('Longitude histogram')\nplt.show()\n\n\n\n\nThe missing values in column ‘Lon’ will be replaced by using the mean value for Lon column.\n\ndf2['Lon'] = df2['Lon'].fillna(df2['Lon'].mean())\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2.isna().sum()\n\nYear               0\nWeek               0\nAddress Block      0\nBlock              0\nTrap               0\nTrap type          0\nDate               0\nMosquito number    0\nMosquito ID        0\nWNV Present        0\nSpecies            0\nLat                0\nLon                0\ndtype: int64\n\n\n\n\nExploring the relationship between mosquito number and date.\nPreviously looked at mosquito number counts.\n\nplt.figure(figsize=(10, 5))\nplt.hist(df2['Mosquito number'], bins=25)\nplt.xlabel('Number of Mosquitos Caught in a Trap')\nplt.ylabel('Occurance')\nplt.title('Mosquito Numbers')\nplt.axvline(df2['Mosquito number'].median(), label='median', color='cornflowerblue')\nplt.axvline(df2['Mosquito number'].mean(), label='mean', color='goldenrod')\nplt.legend()\nplt.show()\n\n\n\n\nIn order to explore the relationship between number of mosquitos caught, I will create four columns titled ‘Month’, ‘Day’, ‘Hour’, and ‘Minute’ which will be extracted from the Date column. This can be done with the following code, and because I already changed the Date column format to datetime64.\n\ndf2['Month'] = pd.DatetimeIndex(df2['Date']).month\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2['Hour'] = pd.DatetimeIndex(df2['Date']).hour\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2['Day'] = pd.DatetimeIndex(df2['Date']).day\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2['Minute'] = pd.DatetimeIndex(df2['Date']).minute\n\n/home/amina/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  \"\"\"Entry point for launching an IPython kernel.\n\n\n\ndf2.groupby('Year')['Mosquito number'].count().plot(kind='bar', figsize=(10, 5))\nplt.ylabel('Average number of mosquitos per trap')\nplt.xlabel('Year')\nplt.title('Number of Mosquitos caught per trap per Year')\nplt.show()\n\n\n\n\nData shows that during 2007 there were more mosquitos caught per trap.\n\ndf2.groupby('Month')['Mosquito number'].count().plot(kind='bar', figsize=(10, 5))\nplt.ylabel('Average number of mosquitos per trap')\nplt.xlabel('Month')\nplt.title('Number of Mosquitos caught per trap per month')\nplt.show()\n\n\n\n\nLooking at the value_counts() of the number of mosquitos caught is increased during the summer months of June to August. However there is missing data for the rest of the months of the year, so this pattern could change with addition of new data.\n\ndf2['Mosquito number'].corr(df2['Month'])\n\n-0.04094150320273162\n\n\n\ndf2.groupby('Day')['Mosquito number'].count().plot(kind='bar', figsize=(10, 5))\n\n<AxesSubplot:xlabel='Day'>\n\n\n\n\n\nThere is not a pattern in the data of number of mosquitos caught per day, it seems random.\n\ndf2[['Mosquito number', 'Trap', 'Day']].sort_values(by= 'Mosquito number')\n\n\n\n\n\n  \n    \n      \n      Mosquito number\n      Trap\n      Day\n    \n  \n  \n    \n      12202\n      1\n      T063\n      17\n    \n    \n      3363\n      1\n      T155\n      1\n    \n    \n      8129\n      1\n      T089\n      28\n    \n    \n      8134\n      1\n      T158\n      28\n    \n    \n      8136\n      1\n      T048\n      28\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      5943\n      50\n      T002\n      14\n    \n    \n      14032\n      50\n      T138\n      12\n    \n    \n      17026\n      50\n      T225\n      27\n    \n    \n      5989\n      50\n      T002\n      14\n    \n    \n      18493\n      50\n      T240B\n      17\n    \n  \n\n17837 rows × 3 columns\n\n\n\n\n\nRelationship between mosquito species and WNV prevalence\n\n#Grouping by Species and WNV Present, and aggregating on Species counts:\ndf2.groupby(['Species', 'WNV Present'])['Species'].count().unstack()\n\n\n\n\n\n  \n    \n      WNV Present\n      negative\n      positive\n    \n    \n      Species\n      \n      \n    \n  \n  \n    \n      CULEX PIPIENS\n      4074\n      1237\n    \n    \n      CULEX RESTUANS\n      9309\n      2078\n    \n    \n      CULEX SALINARIUS\n      215\n      7\n    \n    \n      CULEX TERRITANS\n      903\n      14\n    \n  \n\n\n\n\n\n#Percentile of number of negatives and positives per Species:\n((df2.groupby(['Species', 'WNV Present'])['Species'].count()/\\\ndf2.groupby('Species')['Species'].count())*100).unstack()\n\n\n\n\n\n  \n    \n      WNV Present\n      negative\n      positive\n    \n    \n      Species\n      \n      \n    \n  \n  \n    \n      CULEX PIPIENS\n      76.708718\n      23.291282\n    \n    \n      CULEX RESTUANS\n      81.751120\n      18.248880\n    \n    \n      CULEX SALINARIUS\n      96.846847\n      3.153153\n    \n    \n      CULEX TERRITANS\n      98.473282\n      1.526718\n    \n  \n\n\n\n\n\nplt.figure(figsize=(10, 5))\nSpecies_WNV = df2.groupby(['Species', 'WNV Present'])['Species'].count()/\\\ndf2.groupby('Species')['Species'].count()\npct_registered_df.unstack().plot(kind='barh', stacked=True)\nplt.legend(loc = (1.2, 0.5))\nplt.show()\n\nNameError: name 'pct_registered_df' is not defined\n\n\n<Figure size 720x360 with 0 Axes>\n\n\nOverall, of the species tested most mosquitos were negative for WNV, however around 23% of positives are of the species Culex Pipiens.\n\n\nRelationship between the number of mosquitos caught and trap type\n\n# Draw a nested boxplot to show bills by day and time\nsns.boxplot(x=\"Trap type\", y=\"Mosquito number\", palette=[\"orange\", \"blue\"],data=df2, fliersize=1)\nsns.despine(offset=10, trim=True)\n\n\nGRAVID traps caught less numbers of mosquitos, and also seems to the the trap that corresponds to the outlier data.\nSENTINEL and CDC traps were variable in the number of mosquitos caught per trap. CDC has a lower median suggesting most number of mosquitos caught in these traps tend to be on the lower side.\nOVI trap is not showing a lot of data, however this isn’t a problem with the data, there only seems to be one trap with one successful catch (see follwing table).\n\n\ndf2.groupby(['Mosquito number', 'Trap type'])['Mosquito number'].count().unstack()\n\n\n\n\n\n  \n    \n      Trap type\n      CDC\n      GRAVID\n      OVI\n      SENTINEL\n    \n    \n      Mosquito number\n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      111.0\n      3997.0\n      1.0\n      10.0\n    \n    \n      2\n      51.0\n      2183.0\n      NaN\n      8.0\n    \n    \n      3\n      33.0\n      1503.0\n      NaN\n      8.0\n    \n    \n      4\n      26.0\n      1049.0\n      NaN\n      5.0\n    \n    \n      5\n      35.0\n      852.0\n      NaN\n      8.0\n    \n    \n      6\n      7.0\n      689.0\n      NaN\n      10.0\n    \n    \n      7\n      10.0\n      578.0\n      NaN\n      5.0\n    \n    \n      8\n      7.0\n      503.0\n      NaN\n      3.0\n    \n    \n      9\n      7.0\n      390.0\n      NaN\n      10.0\n    \n    \n      10\n      5.0\n      345.0\n      NaN\n      6.0\n    \n    \n      11\n      5.0\n      339.0\n      NaN\n      3.0\n    \n    \n      12\n      6.0\n      306.0\n      NaN\n      5.0\n    \n    \n      13\n      5.0\n      278.0\n      NaN\n      10.0\n    \n    \n      14\n      6.0\n      231.0\n      NaN\n      1.0\n    \n    \n      15\n      5.0\n      209.0\n      NaN\n      3.0\n    \n    \n      16\n      7.0\n      214.0\n      NaN\n      1.0\n    \n    \n      17\n      3.0\n      189.0\n      NaN\n      1.0\n    \n    \n      18\n      4.0\n      166.0\n      NaN\n      2.0\n    \n    \n      19\n      2.0\n      139.0\n      NaN\n      5.0\n    \n    \n      20\n      4.0\n      129.0\n      NaN\n      2.0\n    \n    \n      21\n      4.0\n      166.0\n      NaN\n      NaN\n    \n    \n      22\n      2.0\n      107.0\n      NaN\n      3.0\n    \n    \n      23\n      5.0\n      130.0\n      NaN\n      4.0\n    \n    \n      24\n      1.0\n      96.0\n      NaN\n      1.0\n    \n    \n      25\n      5.0\n      103.0\n      NaN\n      2.0\n    \n    \n      26\n      10.0\n      114.0\n      NaN\n      1.0\n    \n    \n      27\n      5.0\n      116.0\n      NaN\n      2.0\n    \n    \n      28\n      1.0\n      112.0\n      NaN\n      1.0\n    \n    \n      29\n      2.0\n      116.0\n      NaN\n      3.0\n    \n    \n      30\n      3.0\n      71.0\n      NaN\n      1.0\n    \n    \n      31\n      4.0\n      107.0\n      NaN\n      4.0\n    \n    \n      32\n      4.0\n      85.0\n      NaN\n      NaN\n    \n    \n      33\n      2.0\n      80.0\n      NaN\n      NaN\n    \n    \n      34\n      2.0\n      59.0\n      NaN\n      6.0\n    \n    \n      35\n      5.0\n      58.0\n      NaN\n      2.0\n    \n    \n      36\n      1.0\n      77.0\n      NaN\n      1.0\n    \n    \n      37\n      7.0\n      72.0\n      NaN\n      1.0\n    \n    \n      38\n      3.0\n      57.0\n      NaN\n      NaN\n    \n    \n      39\n      2.0\n      62.0\n      NaN\n      NaN\n    \n    \n      40\n      1.0\n      43.0\n      NaN\n      2.0\n    \n    \n      41\n      4.0\n      48.0\n      NaN\n      9.0\n    \n    \n      42\n      5.0\n      39.0\n      NaN\n      4.0\n    \n    \n      43\n      5.0\n      63.0\n      NaN\n      2.0\n    \n    \n      44\n      1.0\n      66.0\n      NaN\n      NaN\n    \n    \n      45\n      5.0\n      64.0\n      NaN\n      3.0\n    \n    \n      46\n      2.0\n      78.0\n      NaN\n      5.0\n    \n    \n      47\n      1.0\n      83.0\n      NaN\n      6.0\n    \n    \n      48\n      2.0\n      52.0\n      NaN\n      4.0\n    \n    \n      49\n      6.0\n      39.0\n      NaN\n      1.0\n    \n    \n      50\n      90.0\n      446.0\n      NaN\n      35.0\n    \n  \n\n\n\n\n\n\nRelationship between Species and Trap type.\n\ndf2.groupby(['Species', 'Trap type'])['Species'].count().unstack()\n\n\n\n\n\n  \n    \n      Trap type\n      CDC\n      GRAVID\n      OVI\n      SENTINEL\n    \n    \n      Species\n      \n      \n      \n      \n    \n  \n  \n    \n      CULEX PIPIENS\n      373.0\n      4919.0\n      1.0\n      18.0\n    \n    \n      CULEX RESTUANS\n      124.0\n      11076.0\n      NaN\n      187.0\n    \n    \n      CULEX SALINARIUS\n      20.0\n      201.0\n      NaN\n      1.0\n    \n    \n      CULEX TERRITANS\n      12.0\n      902.0\n      NaN\n      3.0\n    \n  \n\n\n\n\n\ndf2.groupby(['Species', 'Trap type'])['Species'].count().unstack().plot(kind='bar', log=True, figsize=(10, 5))\nplt.legend(loc=(1.2, 0.5))\n\n<matplotlib.legend.Legend at 0x7fe9d6c06650>\n\n\n\n\n\n\nComparing all the Species of mosquitos with the traps that caught them, shows at first glance that GRAVID traps are most successful at catching all species of mosquito, especially Culex Restuans.\nFurther CDC appears to be best for catching Culex Pipiens.\nOVI appears to be an unsuccessful trap type overall."
  },
  {
    "objectID": "posts/stats/stats_and_public_health_project/jasmine_m_stats_and_public_health_part _2.html",
    "href": "posts/stats/stats_and_public_health_project/jasmine_m_stats_and_public_health_part _2.html",
    "title": "Portfolio",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.stats import norm\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')"
  },
  {
    "objectID": "posts/stats/stats_and_public_health_project/jasmine_m_stats_and_public_health_part _2.html#section",
    "href": "posts/stats/stats_and_public_health_project/jasmine_m_stats_and_public_health_part _2.html#section",
    "title": "Portfolio",
    "section": "1.",
    "text": "1.\n\n1. Converting the WNV Present column to binary:\nIn our DataFrame we have a column WNV Presen which shows us whether WNV virus was present in our test or not resent, denoted by Positive and Negative respectively. We can change this to a binary format using 1 and 0 as follows: - Positive = 1 - Negative = 0\n\n#Using the replace function to change the values in column WNV Present:\n\nfor row in df1['WNV Present']:\n    if row == 'positive':\n        df1['WNV Present'] = df1['WNV Present'].replace([row], 1)\n    else:\n        df1['WNV Present'] = df1['WNV Present'].replace([row], 0)\n\nIf we check our DataFram the WNV Present column should now contain 1 and 0.\n\ndf1.sample(5)\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      Address Block\n      Trap\n      Trap type\n      Date\n      WNV Present\n      Species\n      Lat\n      Lon\n      Month\n      Mosquito number\n    \n  \n  \n    \n      11050\n      2014\n      38\n      51XX N MONT CLARE AVE\n      T223\n      GRAVID\n      2014-09-18 00:09:00\n      1\n      CULEX PIPIENS\n      41.974530\n      -87.804584\n      9\n      16\n    \n    \n      3070\n      2009\n      21\n      70XX W ARMITAGE AVE\n      T151\n      GRAVID\n      2009-06-02 00:06:00\n      0\n      CULEX PIPIENS\n      41.916135\n      -87.801093\n      6\n      1\n    \n    \n      15611\n      2018\n      30\n      61XX N LEMONT AVE\n      T012\n      GRAVID\n      2018-07-26 00:07:00\n      0\n      CULEX RESTUANS\n      41.993564\n      -87.745420\n      7\n      1\n    \n    \n      17092\n      2019\n      34\n      3XX W 104TH ST\n      T095\n      GRAVID\n      2019-08-22 00:08:00\n      1\n      CULEX RESTUANS\n      41.705328\n      -87.632947\n      8\n      1\n    \n    \n      3295\n      2009\n      25\n      75XX N OAKLEY AVE\n      T148\n      GRAVID\n      2009-06-26 00:06:00\n      0\n      CULEX RESTUANS\n      42.017801\n      -87.687601\n      6\n      2\n    \n  \n\n\n\n\n\n\n2. Creating dummy variables from the Trap type column\nusing the pd.get_dummies() function, the variables in column Trap type will be split into separate columns containing 1 and 0. Each time a row coincides with a trap type, that row will have a 1 in the corresponding trap type column, and a 0 in the rest of the trap type columns. We will drop the OVI column that the function creates because it contains redundant information, as a value of 0 in each of the other columns is essentially the same as a 1 in the OVI column.\n\ndf1['Trap type'].unique()\n\narray(['GRAVID', 'CDC', 'OVI', 'SENTINEL'], dtype=object)\n\n\n\ndf2 = pd.get_dummies(df1[\"Trap type\"])\ndf2.drop(columns=['OVI'], inplace=True)\ndf2\n\n\n\n\n\n  \n    \n      \n      CDC\n      GRAVID\n      SENTINEL\n    \n  \n  \n    \n      0\n      0\n      1\n      0\n    \n    \n      1\n      0\n      1\n      0\n    \n    \n      2\n      0\n      1\n      0\n    \n    \n      3\n      0\n      1\n      0\n    \n    \n      4\n      0\n      1\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      17386\n      0\n      1\n      0\n    \n    \n      17387\n      0\n      1\n      0\n    \n    \n      17388\n      0\n      1\n      0\n    \n    \n      17389\n      0\n      1\n      0\n    \n    \n      17390\n      0\n      1\n      0\n    \n  \n\n17391 rows × 3 columns\n\n\n\nNext we concatenate our df2 (dummy variables matrix) to our df1 dataframe on the axis=1 to, also assigning this to a new dataframe df3, this should bring our columns number up to 16 columns.\n\ndf3 = pd.concat([df1, df2], axis = 1).reset_index(drop=True)\ndf3.sample(3)\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      Address Block\n      Trap\n      Trap type\n      Date\n      WNV Present\n      Species\n      Lat\n      Lon\n      Month\n      Mosquito number\n      CDC\n      GRAVID\n      SENTINEL\n    \n  \n  \n    \n      14606\n      2017\n      33\n      101XX S STONY ISLAND AVE\n      T138B\n      SENTINEL\n      2017-08-17 00:08:00\n      1\n      CULEX RESTUANS\n      41.710829\n      -87.584526\n      8\n      96\n      0\n      0\n      1\n    \n    \n      1849\n      2007\n      38\n      14XX N HUMBOLDT DR\n      T033\n      GRAVID\n      2007-09-24 00:09:00\n      0\n      CULEX PIPIENS\n      41.907285\n      -87.701395\n      9\n      17\n      0\n      1\n      0\n    \n    \n      5665\n      2011\n      27\n      100XX W OHARE AIRPORT\n      T906\n      GRAVID\n      2011-07-11 00:07:00\n      0\n      CULEX RESTUANS\n      41.977738\n      -87.880969\n      7\n      44\n      0\n      1\n      0\n    \n  \n\n\n\n\n\ndf3.drop(columns=['Trap type'], inplace=True)\n\nChecking our dataframe to ensure the Trap type column has been dropped.\n\ndf3.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 17391 entries, 0 to 17390\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Year             17391 non-null  int64  \n 1   Week             17391 non-null  int64  \n 2   Address Block    17391 non-null  object \n 3   Trap             17391 non-null  object \n 4   Date             17391 non-null  object \n 5   WNV Present      17391 non-null  int64  \n 6   Species          17391 non-null  object \n 7   Lat              17391 non-null  float64\n 8   Lon              17391 non-null  float64\n 9   Month            17391 non-null  int64  \n 10  Mosquito number  17391 non-null  int64  \n 11  CDC              17391 non-null  uint8  \n 12  GRAVID           17391 non-null  uint8  \n 13  SENTINEL         17391 non-null  uint8  \ndtypes: float64(2), int64(5), object(4), uint8(3)\nmemory usage: 1.5+ MB\n\n\n\ndf3.shape\nprint(f'df3 datafram contains {df3.shape[0]} rows and {df3.shape[1]} columns')\n\ndf3 datafram contains 17391 rows and 14 columns\n\n\n\ndf3.nunique().sort_values()\n\nWNV Present           2\nCDC                   2\nGRAVID                2\nSENTINEL              2\nSpecies               4\nMonth                 6\nYear                 13\nWeek                 21\nAddress Block       154\nMosquito number     175\nTrap                190\nDate                298\nLat                2509\nLon                2509\ndtype: int64\n\n\n\n\nUpdating the num_df dataframe:\nSince we’ve added three new columns that have numerical values, we need to add these to our num_df dataframe.\n\nnumeric_cols1 = list(df3.select_dtypes('number').columns)\nnumeric_cols1\n\n['Year',\n 'Week',\n 'WNV Present',\n 'Lat',\n 'Lon',\n 'Month',\n 'Mosquito number',\n 'CDC',\n 'GRAVID',\n 'SENTINEL']\n\n\n\ndf_num1 = df3[numeric_cols1]\ndf_num1.sample(3)\n\n\n\n\n\n  \n    \n      \n      Year\n      Week\n      WNV Present\n      Lat\n      Lon\n      Month\n      Mosquito number\n      CDC\n      GRAVID\n      SENTINEL\n    \n  \n  \n    \n      7739\n      2012\n      38\n      0\n      41.883772\n      -87.716168\n      9\n      1\n      0\n      1\n      0\n    \n    \n      482\n      2007\n      29\n      0\n      41.704687\n      -87.564236\n      7\n      55\n      1\n      0\n      0\n    \n    \n      11378\n      2015\n      24\n      0\n      41.798211\n      -87.736925\n      6\n      5\n      0\n      1\n      0"
  },
  {
    "objectID": "posts/stats/index.html",
    "href": "posts/stats/index.html",
    "title": "West Nile Virus",
    "section": "",
    "text": "Predicting the presence of West Nile Virus in mosquitos accross Chicago.\n\n\n\n\n\n\n\n\n\n\nWest Nile Virus: Stats and Public Health Part 1\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nIntroduction:\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Some projects I’ve done :)",
    "section": "",
    "text": "West Nile Virus\n\n\n\n\n\n\n\nhealth\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  }
]